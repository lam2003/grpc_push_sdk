// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pushGateWay.proto

#include "pushGateWay.pb.h"
#include "pushGateWay.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc {
namespace push {
namespace gateway {

static const char* PushGateway_method_names[] = {
  "/grpc.push.gateway.PushGateway/PushRegister",
  "/grpc.push.gateway.PushGateway/PushDataToClient",
  "/grpc.push.gateway.PushGateway/PushDataToGroup",
};

std::unique_ptr< PushGateway::Stub> PushGateway::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PushGateway::Stub> stub(new PushGateway::Stub(channel));
  return stub;
}

PushGateway::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PushRegister_(PushGateway_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_PushDataToClient_(PushGateway_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PushDataToGroup_(PushGateway_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>* PushGateway::Stub::PushRegisterRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>::Create(channel_.get(), rpcmethod_PushRegister_, context);
}

void PushGateway::Stub::experimental_async::PushRegister(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::grpc::push::gateway::PushRegReq,::grpc::push::gateway::PushData>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::grpc::push::gateway::PushRegReq,::grpc::push::gateway::PushData>::Create(stub_->channel_.get(), stub_->rpcmethod_PushRegister_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>* PushGateway::Stub::AsyncPushRegisterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>::Create(channel_.get(), cq, rpcmethod_PushRegister_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>* PushGateway::Stub::PrepareAsyncPushRegisterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>::Create(channel_.get(), cq, rpcmethod_PushRegister_, context, false, nullptr);
}

::grpc::Status PushGateway::Stub::PushDataToClient(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq& request, ::grpc::push::gateway::PushToClientResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PushDataToClient_, context, request, response);
}

void PushGateway::Stub::experimental_async::PushDataToClient(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq* request, ::grpc::push::gateway::PushToClientResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PushDataToClient_, context, request, response, std::move(f));
}

void PushGateway::Stub::experimental_async::PushDataToClient(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc::push::gateway::PushToClientResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PushDataToClient_, context, request, response, std::move(f));
}

void PushGateway::Stub::experimental_async::PushDataToClient(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq* request, ::grpc::push::gateway::PushToClientResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PushDataToClient_, context, request, response, reactor);
}

void PushGateway::Stub::experimental_async::PushDataToClient(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc::push::gateway::PushToClientResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PushDataToClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToClientResp>* PushGateway::Stub::AsyncPushDataToClientRaw(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc::push::gateway::PushToClientResp>::Create(channel_.get(), cq, rpcmethod_PushDataToClient_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToClientResp>* PushGateway::Stub::PrepareAsyncPushDataToClientRaw(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc::push::gateway::PushToClientResp>::Create(channel_.get(), cq, rpcmethod_PushDataToClient_, context, request, false);
}

::grpc::Status PushGateway::Stub::PushDataToGroup(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq& request, ::grpc::push::gateway::PushToGroupResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PushDataToGroup_, context, request, response);
}

void PushGateway::Stub::experimental_async::PushDataToGroup(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq* request, ::grpc::push::gateway::PushToGroupResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PushDataToGroup_, context, request, response, std::move(f));
}

void PushGateway::Stub::experimental_async::PushDataToGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc::push::gateway::PushToGroupResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PushDataToGroup_, context, request, response, std::move(f));
}

void PushGateway::Stub::experimental_async::PushDataToGroup(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq* request, ::grpc::push::gateway::PushToGroupResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PushDataToGroup_, context, request, response, reactor);
}

void PushGateway::Stub::experimental_async::PushDataToGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc::push::gateway::PushToGroupResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PushDataToGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToGroupResp>* PushGateway::Stub::AsyncPushDataToGroupRaw(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc::push::gateway::PushToGroupResp>::Create(channel_.get(), cq, rpcmethod_PushDataToGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToGroupResp>* PushGateway::Stub::PrepareAsyncPushDataToGroupRaw(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc::push::gateway::PushToGroupResp>::Create(channel_.get(), cq, rpcmethod_PushDataToGroup_, context, request, false);
}

PushGateway::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PushGateway_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< PushGateway::Service, ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>(
          std::mem_fn(&PushGateway::Service::PushRegister), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PushGateway_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PushGateway::Service, ::grpc::push::gateway::PushToClientReq, ::grpc::push::gateway::PushToClientResp>(
          std::mem_fn(&PushGateway::Service::PushDataToClient), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PushGateway_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PushGateway::Service, ::grpc::push::gateway::PushToGroupReq, ::grpc::push::gateway::PushToGroupResp>(
          std::mem_fn(&PushGateway::Service::PushDataToGroup), this)));
}

PushGateway::Service::~Service() {
}

::grpc::Status PushGateway::Service::PushRegister(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::push::gateway::PushData, ::grpc::push::gateway::PushRegReq>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PushGateway::Service::PushDataToClient(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToClientReq* request, ::grpc::push::gateway::PushToClientResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PushGateway::Service::PushDataToGroup(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToGroupReq* request, ::grpc::push::gateway::PushToGroupResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc
}  // namespace push
}  // namespace gateway

