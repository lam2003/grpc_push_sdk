// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pushGateWay.proto
#ifndef GRPC_pushGateWay_2eproto__INCLUDED
#define GRPC_pushGateWay_2eproto__INCLUDED

#include "pushGateWay.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace grpc {
namespace push {
namespace gateway {

class pushGateway final {
 public:
  static constexpr char const* service_full_name() {
    return "grpc.push.gateway.pushGateway";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // client
    // rpc UserLogin (LoginRequest) returns (LoginResponse);
    // rpc UserLogout (LogoutRequest) returns (LogoutResponse);
    // rpc UserJoinGroup (JoinGroupRequest) returns (JoinGroupResponse);
    // rpc UserLeaveGroup (LeaveGroupRequest) returns (LeaveGroupResponse);
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>> PushRegister(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>>(PushRegisterRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>> AsyncPushRegister(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>>(AsyncPushRegisterRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>> PrepareAsyncPushRegister(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>>(PrepareAsyncPushRegisterRaw(context, cq));
    }
    // server
    virtual ::grpc::Status PushDataToClient(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq& request, ::grpc::push::gateway::PushToClientResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc::push::gateway::PushToClientResp>> AsyncPushDataToClient(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc::push::gateway::PushToClientResp>>(AsyncPushDataToClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc::push::gateway::PushToClientResp>> PrepareAsyncPushDataToClient(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc::push::gateway::PushToClientResp>>(PrepareAsyncPushDataToClientRaw(context, request, cq));
    }
    virtual ::grpc::Status PushDataToGroup(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq& request, ::grpc::push::gateway::PushToGroupResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc::push::gateway::PushToGroupResp>> AsyncPushDataToGroup(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc::push::gateway::PushToGroupResp>>(AsyncPushDataToGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc::push::gateway::PushToGroupResp>> PrepareAsyncPushDataToGroup(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc::push::gateway::PushToGroupResp>>(PrepareAsyncPushDataToGroupRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // client
      // rpc UserLogin (LoginRequest) returns (LoginResponse);
      // rpc UserLogout (LogoutRequest) returns (LogoutResponse);
      // rpc UserJoinGroup (JoinGroupRequest) returns (JoinGroupResponse);
      // rpc UserLeaveGroup (LeaveGroupRequest) returns (LeaveGroupResponse);
      virtual void PushRegister(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::grpc::push::gateway::PushRegReq,::grpc::push::gateway::PushData>* reactor) = 0;
      // server
      virtual void PushDataToClient(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq* request, ::grpc::push::gateway::PushToClientResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushDataToClient(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc::push::gateway::PushToClientResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushDataToGroup(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq* request, ::grpc::push::gateway::PushToGroupResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushDataToGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc::push::gateway::PushToGroupResp* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>* PushRegisterRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>* AsyncPushRegisterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>* PrepareAsyncPushRegisterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc::push::gateway::PushToClientResp>* AsyncPushDataToClientRaw(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc::push::gateway::PushToClientResp>* PrepareAsyncPushDataToClientRaw(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc::push::gateway::PushToGroupResp>* AsyncPushDataToGroupRaw(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc::push::gateway::PushToGroupResp>* PrepareAsyncPushDataToGroupRaw(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>> PushRegister(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>>(PushRegisterRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>> AsyncPushRegister(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>>(AsyncPushRegisterRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>> PrepareAsyncPushRegister(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>>(PrepareAsyncPushRegisterRaw(context, cq));
    }
    ::grpc::Status PushDataToClient(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq& request, ::grpc::push::gateway::PushToClientResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToClientResp>> AsyncPushDataToClient(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToClientResp>>(AsyncPushDataToClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToClientResp>> PrepareAsyncPushDataToClient(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToClientResp>>(PrepareAsyncPushDataToClientRaw(context, request, cq));
    }
    ::grpc::Status PushDataToGroup(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq& request, ::grpc::push::gateway::PushToGroupResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToGroupResp>> AsyncPushDataToGroup(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToGroupResp>>(AsyncPushDataToGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToGroupResp>> PrepareAsyncPushDataToGroup(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToGroupResp>>(PrepareAsyncPushDataToGroupRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void PushRegister(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::grpc::push::gateway::PushRegReq,::grpc::push::gateway::PushData>* reactor) override;
      void PushDataToClient(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq* request, ::grpc::push::gateway::PushToClientResp* response, std::function<void(::grpc::Status)>) override;
      void PushDataToClient(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc::push::gateway::PushToClientResp* response, std::function<void(::grpc::Status)>) override;
      void PushDataToGroup(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq* request, ::grpc::push::gateway::PushToGroupResp* response, std::function<void(::grpc::Status)>) override;
      void PushDataToGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grpc::push::gateway::PushToGroupResp* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>* PushRegisterRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>* AsyncPushRegisterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>* PrepareAsyncPushRegisterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToClientResp>* AsyncPushDataToClientRaw(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToClientResp>* PrepareAsyncPushDataToClientRaw(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToClientReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToGroupResp>* AsyncPushDataToGroupRaw(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc::push::gateway::PushToGroupResp>* PrepareAsyncPushDataToGroupRaw(::grpc::ClientContext* context, const ::grpc::push::gateway::PushToGroupReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PushRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_PushDataToClient_;
    const ::grpc::internal::RpcMethod rpcmethod_PushDataToGroup_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // client
    // rpc UserLogin (LoginRequest) returns (LoginResponse);
    // rpc UserLogout (LogoutRequest) returns (LogoutResponse);
    // rpc UserJoinGroup (JoinGroupRequest) returns (JoinGroupResponse);
    // rpc UserLeaveGroup (LeaveGroupRequest) returns (LeaveGroupResponse);
    virtual ::grpc::Status PushRegister(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::push::gateway::PushData, ::grpc::push::gateway::PushRegReq>* stream);
    // server
    virtual ::grpc::Status PushDataToClient(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToClientReq* request, ::grpc::push::gateway::PushToClientResp* response);
    virtual ::grpc::Status PushDataToGroup(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToGroupReq* request, ::grpc::push::gateway::PushToGroupResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PushRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PushRegister() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PushRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushRegister(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::push::gateway::PushData, ::grpc::push::gateway::PushRegReq>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushRegister(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::push::gateway::PushData, ::grpc::push::gateway::PushRegReq>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushDataToClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PushDataToClient() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PushDataToClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDataToClient(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToClientReq* request, ::grpc::push::gateway::PushToClientResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushDataToClient(::grpc::ServerContext* context, ::grpc::push::gateway::PushToClientReq* request, ::grpc::ServerAsyncResponseWriter< ::grpc::push::gateway::PushToClientResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushDataToGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PushDataToGroup() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PushDataToGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDataToGroup(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToGroupReq* request, ::grpc::push::gateway::PushToGroupResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushDataToGroup(::grpc::ServerContext* context, ::grpc::push::gateway::PushToGroupReq* request, ::grpc::ServerAsyncResponseWriter< ::grpc::push::gateway::PushToGroupResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PushRegister<WithAsyncMethod_PushDataToClient<WithAsyncMethod_PushDataToGroup<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PushRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PushRegister() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackBidiHandler< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>(
          [this] { return this->PushRegister(); }));
    }
    ~ExperimentalWithCallbackMethod_PushRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushRegister(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::push::gateway::PushData, ::grpc::push::gateway::PushRegReq>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>* PushRegister() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::grpc::push::gateway::PushRegReq, ::grpc::push::gateway::PushData>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PushDataToClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PushDataToClient() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::push::gateway::PushToClientReq, ::grpc::push::gateway::PushToClientResp>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::push::gateway::PushToClientReq* request,
                 ::grpc::push::gateway::PushToClientResp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PushDataToClient(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PushDataToClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDataToClient(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToClientReq* request, ::grpc::push::gateway::PushToClientResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PushDataToClient(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToClientReq* request, ::grpc::push::gateway::PushToClientResp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PushDataToGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PushDataToGroup() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::push::gateway::PushToGroupReq, ::grpc::push::gateway::PushToGroupResp>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::push::gateway::PushToGroupReq* request,
                 ::grpc::push::gateway::PushToGroupResp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PushDataToGroup(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PushDataToGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDataToGroup(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToGroupReq* request, ::grpc::push::gateway::PushToGroupResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PushDataToGroup(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToGroupReq* request, ::grpc::push::gateway::PushToGroupResp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_PushRegister<ExperimentalWithCallbackMethod_PushDataToClient<ExperimentalWithCallbackMethod_PushDataToGroup<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PushRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PushRegister() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PushRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushRegister(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::push::gateway::PushData, ::grpc::push::gateway::PushRegReq>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushDataToClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PushDataToClient() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PushDataToClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDataToClient(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToClientReq* request, ::grpc::push::gateway::PushToClientResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushDataToGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PushDataToGroup() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PushDataToGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDataToGroup(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToGroupReq* request, ::grpc::push::gateway::PushToGroupResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PushRegister() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PushRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushRegister(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::push::gateway::PushData, ::grpc::push::gateway::PushRegReq>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushRegister(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushDataToClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PushDataToClient() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PushDataToClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDataToClient(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToClientReq* request, ::grpc::push::gateway::PushToClientResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushDataToClient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushDataToGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PushDataToGroup() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PushDataToGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDataToGroup(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToGroupReq* request, ::grpc::push::gateway::PushToGroupResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushDataToGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PushRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PushRegister() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->PushRegister(); }));
    }
    ~ExperimentalWithRawCallbackMethod_PushRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushRegister(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::push::gateway::PushData, ::grpc::push::gateway::PushRegReq>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* PushRegister() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PushDataToClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PushDataToClient() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PushDataToClient(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PushDataToClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDataToClient(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToClientReq* request, ::grpc::push::gateway::PushToClientResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PushDataToClient(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PushDataToGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PushDataToGroup() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PushDataToGroup(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PushDataToGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDataToGroup(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToGroupReq* request, ::grpc::push::gateway::PushToGroupResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PushDataToGroup(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushDataToClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PushDataToClient() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc::push::gateway::PushToClientReq, ::grpc::push::gateway::PushToClientResp>(std::bind(&WithStreamedUnaryMethod_PushDataToClient<BaseClass>::StreamedPushDataToClient, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PushDataToClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushDataToClient(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToClientReq* request, ::grpc::push::gateway::PushToClientResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushDataToClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc::push::gateway::PushToClientReq,::grpc::push::gateway::PushToClientResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushDataToGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PushDataToGroup() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc::push::gateway::PushToGroupReq, ::grpc::push::gateway::PushToGroupResp>(std::bind(&WithStreamedUnaryMethod_PushDataToGroup<BaseClass>::StreamedPushDataToGroup, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PushDataToGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushDataToGroup(::grpc::ServerContext* context, const ::grpc::push::gateway::PushToGroupReq* request, ::grpc::push::gateway::PushToGroupResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushDataToGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc::push::gateway::PushToGroupReq,::grpc::push::gateway::PushToGroupResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PushDataToClient<WithStreamedUnaryMethod_PushDataToGroup<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PushDataToClient<WithStreamedUnaryMethod_PushDataToGroup<Service > > StreamedService;
};

}  // namespace gateway
}  // namespace push
}  // namespace grpc


#endif  // GRPC_pushGateWay_2eproto__INCLUDED
